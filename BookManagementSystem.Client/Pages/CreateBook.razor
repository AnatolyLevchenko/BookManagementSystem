@page "/create-book"
@using BookManagement.Shared
@inject BookService BookService
@inject NavigationManager NavigationManager

<h3 class="mb-4">Create New Book</h3>

@if (authors == null || genres == null)
{
    <p>Loading authors and genres...</p>
}
else
{
    <EditForm Model="newBook" OnValidSubmit="HandleSubmit" class="card p-4 shadow-sm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="title" class="form-label">Title:</label>
            <InputText id="title" @bind-Value="newBook.Title" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="author" class="form-label">Author:</label>
            <InputSelect id="author" @bind-Value="newBook.AuthorId" class="form-select">
                @foreach (var author in authors)
                {
                    <option value="@author.Id">@author.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="genre" class="form-label">Genre:</label>
            <InputSelect id="genre" @bind-Value="newBook.GenreId" class="form-select">
                @foreach (var genre in genres)
                {
                    <option value="@genre.Id">@genre.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="year" class="form-label">Year:</label>
            <InputNumber id="year" @bind-Value="newBook.Year" class="form-control" />
        </div>

        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-success">Create Book</button>
            <button @onclick="GoBack" class="btn btn-secondary">Back</button>
        </div>
    </EditForm>
}

@code {
    private readonly BookCreateDto newBook = new();
    private IEnumerable<AuthorDto> authors;
    private IEnumerable<GenreDto> genres;

    protected override async Task OnInitializedAsync()
    {
        authors = await BookService.GetAuthorsAsync();
        genres = await BookService.GetGenresAsync();

        // Set default selected values
        if (authors.Any())
        {
            newBook.AuthorId = authors.First().Id;
        }

        if (genres.Any())
        {
            newBook.GenreId = genres.First().Id;
        }

        newBook.Year = DateTime.Now.Year;
    }

    private async Task HandleSubmit()
    {
        await BookService.CreateBookAsync(newBook);
        NavigationManager.NavigateTo("/books");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/books");
    }
}
